import numpy as np
import wave
import struct
import os
import sys
from scipy.io.wavfile import write, read
from scipy.signal import hilbert, find_peaks

class DialupModem:
  def __init__(self, sample_rate=8000, baud_rate=300):
      """
      –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–º–∞
      sample_rate: —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (–ì—Ü)
      baud_rate: —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ (–±–æ–¥)
      """
      self.sample_rate = sample_rate
      self.baud_rate = baud_rate
      self.bit_duration = sample_rate / baud_rate  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤ –Ω–∞ –±–∏—Ç
      
      # –ß–∞—Å—Ç–æ—Ç—ã –¥–ª—è FSK –º–æ–¥—É–ª—è—Ü–∏–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç Bell 103)
      self.freq_0 = 1070  # —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –±–∏—Ç–∞ '0'
      self.freq_1 = 1270  # —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –±–∏—Ç–∞ '1'
      
      self.debug_mode = False  # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
      
  def text_to_bits(self, text):
      """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±–∏—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8"""
      bits = []
      
      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±–∞–π—Ç—ã UTF-8
      try:
          text_bytes = text.encode('utf-8')
      except UnicodeEncodeError:
          print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ UTF-8")
          return []
      
      if self.debug_mode:
          print(f"üîç –¢–µ–∫—Å—Ç –≤ –±–∞–π—Ç–∞—Ö UTF-8: {list(text_bytes)}")
      
      # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ (4 –±–∞–π—Ç–∞)
      start_marker = b'\xAA\x55\xAA\x55'  # –õ–µ–≥–∫–æ —Ä–∞–∑–ª–∏—á–∏–º—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
      
      # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö (2 –±–∞–π—Ç–∞, little-endian)
      data_length = len(text_bytes)
      length_bytes = data_length.to_bytes(2, 'little')
      
      # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö
      full_data = start_marker + length_bytes + text_bytes
      
      if self.debug_mode:
          print(f"üîç –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: {list(full_data)}")
          print(f"üîç –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {data_length} –±–∞–π—Ç")
      
      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –±–∞–π—Ç –≤ –±–∏—Ç—ã (—Å—Ç–∞—Ä—à–∏–π –±–∏—Ç –ø–µ—Ä–≤—ã–π)
      for byte_val in full_data:
          for i in range(7, -1, -1):  # –û—Ç —Å—Ç–∞—Ä—à–µ–≥–æ –∫ –º–ª–∞–¥—à–µ–º—É –±–∏—Ç—É
              bits.append((byte_val >> i) & 1)
      
      return bits
  
  def bits_to_text(self, bits):
      """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–∏—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8"""
      if len(bits) < 48:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ + –¥–ª–∏–Ω—ã
          if self.debug_mode:
              print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç–æ–≤ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
          return ""
      
      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏—Ç—ã –≤ –±–∞–π—Ç—ã
      bytes_data = []
      for i in range(0, len(bits) - 7, 8):
          if i + 8 <= len(bits):
              byte_val = 0
              for j in range(8):
                  byte_val = (byte_val << 1) | bits[i + j]
              bytes_data.append(byte_val)
      
      if self.debug_mode:
          print(f"üîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã: {bytes_data[:20]}..." if len(bytes_data) > 20 else f"üîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã: {bytes_data}")
      
      # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞
      start_marker = [0xAA, 0x55, 0xAA, 0x55]
      start_pos = -1
      
      for i in range(len(bytes_data) - 3):
          if bytes_data[i:i+4] == start_marker:
              start_pos = i + 4
              break
      
      if start_pos == -1:
          if self.debug_mode:
              print("‚ùå –ú–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
          return ""
      
      if start_pos + 2 >= len(bytes_data):
          if self.debug_mode:
              print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞")
          return ""
      
      # –ß–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö
      data_length = bytes_data[start_pos] + (bytes_data[start_pos + 1] << 8)
      data_start = start_pos + 2
      
      if self.debug_mode:
          print(f"üîç –ù–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {start_pos - 4}")
          print(f"üîç –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {data_length} –±–∞–π—Ç")
      
      if data_start + data_length > len(bytes_data):
          if self.debug_mode:
              print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: –Ω—É–∂–Ω–æ {data_length}, –¥–æ—Å—Ç—É–ø–Ω–æ {len(bytes_data) - data_start}")
          # –ë–µ—Ä–µ–º —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å
          data_length = len(bytes_data) - data_start
      
      # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      text_bytes = bytes(bytes_data[data_start:data_start + data_length])
      
      if self.debug_mode:
          print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –±–∞–π—Ç—ã: {list(text_bytes)}")
      
      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ —Ç–µ–∫—Å—Ç UTF-8
      try:
          decoded_text = text_bytes.decode('utf-8', errors='ignore')
          return decoded_text
      except UnicodeDecodeError as e:
          if self.debug_mode:
              print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è UTF-8: {e}")
          return ""
  
  def encode_to_audio(self, text, output_file):
      """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª"""
      print(f"\nüì° –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: '{text}'")
      
      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±–∏—Ç—ã
      bits = self.text_to_bits(text)
      if not bits:
          print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –±–∏—Ç—ã")
          return False
          
      print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–æ–≤: {len(bits)}")
      
      if self.debug_mode:
          print(f"üîç –ü–µ—Ä–≤—ã–µ –±–∏—Ç—ã: {bits[:32]}..." if len(bits) > 32 else f"üîç –í—Å–µ –±–∏—Ç—ã: {bits}")
      
      # –°–æ–∑–¥–∞–µ–º –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
      audio_data = []
      
      # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ç–∏—à–∏–Ω—É –≤ –Ω–∞—á–∞–ª–µ
      silence_duration = int(0.1 * self.sample_rate)
      audio_data.extend(np.zeros(silence_duration))
      
      # –ö–æ–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –±–∏—Ç
      for i, bit in enumerate(bits):
          freq = self.freq_1 if bit == 1 else self.freq_0
          
          # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—É—Å–æ–∏–¥—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–∏—Ç–∞
          t = np.linspace(0, 1/self.baud_rate, int(self.bit_duration))
          bit_signal = 0.8 * np.sin(2 * np.pi * freq * t)  # –ê–º–ø–ª–∏—Ç—É–¥–∞ 0.8
          
          audio_data.extend(bit_signal)
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          if (i + 1) % 50 == 0 or i == len(bits) - 1:
              progress = (i + 1) / len(bits) * 100
              print(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {progress:.1f}%")
      
      # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏—à–∏–Ω—É –≤ –∫–æ–Ω—Ü–µ
      audio_data.extend(np.zeros(silence_duration))
      
      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array
      audio_data = np.array(audio_data)
      
      # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ WAV —Ñ–∞–π–ª
      write(output_file, self.sample_rate, (audio_data * 32767).astype(np.int16))
      print(f"‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
      print(f"üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(audio_data) / self.sample_rate:.2f} —Å–µ–∫—É–Ω–¥")
      return True
  
  def correlate_with_frequency(self, signal, freq, sample_rate):
      """–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π"""
      t = np.linspace(0, len(signal) / sample_rate, len(signal))
      reference_sin = np.sin(2 * np.pi * freq * t)
      reference_cos = np.cos(2 * np.pi * freq * t)
      
      # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
      corr_sin = np.sum(signal * reference_sin)
      corr_cos = np.sum(signal * reference_cos)
      
      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ—â–Ω–æ—Å—Ç—å (–∫–≤–∞–¥—Ä–∞—Ç –∞–º–ø–ª–∏—Ç—É–¥—ã)
      return corr_sin**2 + corr_cos**2
  
  def decode_from_audio(self, input_file):
      """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—Å—Ç"""
      print(f"\nüéµ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {input_file}")
      
      try:
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
          if not os.path.exists(input_file):
              print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª '{input_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
              return ""
          
          # –ß–∏—Ç–∞–µ–º WAV —Ñ–∞–π–ª
          sample_rate, audio_data = read(input_file)
          
          # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
          if audio_data.dtype == np.int16:
              audio_data = audio_data.astype(np.float32) / 32767.0
          elif audio_data.dtype == np.int32:
              audio_data = audio_data.astype(np.float32) / 2147483647.0
          else:
              audio_data = audio_data.astype(np.float32)
          
          print(f"üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞: {len(audio_data) / sample_rate:.2f} —Å–µ–∫—É–Ω–¥")
          print(f"üìä –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {sample_rate} –ì—Ü")
          
          # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —á–∞—Å—Ç–æ—Ç—É —Ñ–∞–π–ª–∞
          actual_bit_duration = sample_rate / self.baud_rate
          samples_per_bit = int(actual_bit_duration)
          
          print(f"üîç –°—ç–º–ø–ª–æ–≤ –Ω–∞ –±–∏—Ç: {samples_per_bit}")
          
          # –£–±–∏—Ä–∞–µ–º —Ç–∏—à–∏–Ω—É –≤ –Ω–∞—á–∞–ª–µ
          threshold = 0.01
          start_idx = 0
          for i in range(len(audio_data)):
              if abs(audio_data[i]) > threshold:
                  start_idx = max(0, i - samples_per_bit//4)  # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –Ω–∞–∑–∞–¥
                  break
          
          audio_data = audio_data[start_idx:]
          print(f"üîç –ù–∞—á–∞–ª–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {start_idx / sample_rate:.3f} —Å–µ–∫")
          
          # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∏—Ç—ã
          bits = []
          total_samples = len(audio_data)
          
          print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏—Ç–æ–≤...")
          
          for i in range(0, total_samples - samples_per_bit, samples_per_bit):
              # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–∏—Ç–∞
              segment = audio_data[i:i + samples_per_bit]
              
              if len(segment) < samples_per_bit:
                  break
              
              # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã
              power_0 = self.correlate_with_frequency(segment, self.freq_0, sample_rate)
              power_1 = self.correlate_with_frequency(segment, self.freq_1, sample_rate)
              
              # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∏—Ç –ø–æ –±–æ–ª—å—à–µ–π –º–æ—â–Ω–æ—Å—Ç–∏
              if power_1 > power_0:
                  bits.append(1)
                  if self.debug_mode and len(bits) <= 20:
                      print(f"–ë–∏—Ç {len(bits)}: 1 (P0={power_0:.2f}, P1={power_1:.2f})")
              else:
                  bits.append(0)
                  if self.debug_mode and len(bits) <= 20:
                      print(f"–ë–∏—Ç {len(bits)}: 0 (P0={power_0:.2f}, P1={power_1:.2f})")
              
              # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
              if len(bits) % 50 == 0:
                  progress = i / total_samples * 100
                  print(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {min(progress, 100):.1f}%")
          
          print(f"üìä –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –±–∏—Ç–æ–≤: {len(bits)}")
          
          if self.debug_mode and len(bits) > 0:
              print(f"üîç –ü–µ—Ä–≤—ã–µ –±–∏—Ç—ã: {bits[:32]}..." if len(bits) > 32 else f"üîç –í—Å–µ –±–∏—Ç—ã: {bits}")
          
          # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏—Ç—ã –≤ —Ç–µ–∫—Å—Ç
          decoded_text = self.bits_to_text(bits)
          
          if decoded_text:
              print(f"‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{decoded_text}'")
          else:
              print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.")
              if not self.debug_mode:
                  print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
          
          return decoded_text
          
      except Exception as e:
          print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
          if self.debug_mode:
              import traceback
              traceback.print_exc()
          return ""

def print_header():
  """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
  print("=" * 60)
  print("üñ•Ô∏è  DIAL-UP MODEM TEXT CODEC")
  print("üì° –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–≤—É–∫–∏ –º–æ–¥–µ–º–∞")
  print("=" * 60)

def print_menu():
  """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
  print("\nüìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
  print("1Ô∏è‚É£  –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª")
  print("2Ô∏è‚É£  –†–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç")
  print("3Ô∏è‚É£  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–º–∞")
  print("4Ô∏è‚É£  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ")
  print("5Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–µ–∫–∞")
  print("0Ô∏è‚É£  –í—ã—Ö–æ–¥")
  print("-" * 40)

def encode_menu(modem):
  """–ú–µ–Ω—é –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
  print("\nüî§ –ö–û–î–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê")
  print("-" * 30)
  
  # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
  text = input("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip()
  if not text:
      print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
      return
  
  # –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  default_filename = "encoded_message.wav"
  filename = input(f"üíæ –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_filename}): ").strip()
  if not filename:
      filename = default_filename
  
  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .wav –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if not filename.lower().endswith('.wav'):
      filename += '.wav'
  
  print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
  success = modem.encode_to_audio(text, filename)
  
  if success:
      print(f"\nüéâ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
      print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {filename}")
  
  input("\nüëÜ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def decode_menu(modem):
  """–ú–µ–Ω—é –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
  print("\nüéµ –î–ï–ö–û–î–ò–†–û–í–ê–ù–ò–ï –ó–í–£–ö–û–í–û–ì–û –§–ê–ô–õ–ê")
  print("-" * 35)
  
  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ .wav —Ñ–∞–π–ª—ã
  wav_files = [f for f in os.listdir('.') if f.lower().endswith('.wav')]
  if wav_files:
      print("\nüìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ WAV —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ:")
      for i, file in enumerate(wav_files, 1):
          print(f"   {i}. {file}")
      print("\nüí° –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è")
  
  # –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  filename = input("\nüéß –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip()
  if not filename:
      print("‚ùå –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
      return
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞
  try:
      file_num = int(filename)
      if 1 <= file_num <= len(wav_files):
          filename = wav_files[file_num - 1]
          print(f"üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {filename}")
      else:
          print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞!")
          return
  except ValueError:
      # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º—è —Ñ–∞–π–ª–∞
      if not filename.lower().endswith('.wav'):
          filename += '.wav'
  
  print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
  decoded_text = modem.decode_from_audio(filename)
  
  if decoded_text:
      print(f"\nüéâ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
      
      # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
      save_choice = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª? (y/n): ").strip().lower()
      if save_choice in ['y', 'yes', '–¥–∞', '–¥']:
          text_filename = filename.replace('.wav', '_decoded.txt')
          try:
              with open(text_filename, 'w', encoding='utf-8') as f:
                  f.write(decoded_text)
              print(f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {text_filename}")
          except Exception as e:
              print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
  else:
      print("\n‚ùå –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
  
  input("\nüëÜ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def test_codec(modem):
  """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–µ–∫–∞"""
  print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–î–ï–ö–ê")
  print("-" * 25)
  
  test_texts = [
      "Hello World!",
      "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!",
      "123456789",
      "Test message",
      "–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ",
      "English + –†—É—Å—Å–∫–∏–π = OK!"
  ]
  
  print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
  for i, text in enumerate(test_texts, 1):
      print(f"   {i}. '{text}'")
  print("   0. –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç")
  
  choice = input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç (0-6): ").strip()
  
  if choice == '0':
      test_text = input("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip()
      if not test_text:
          print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
          return
  else:
      try:
          idx = int(choice) - 1
          if 0 <= idx < len(test_texts):
              test_text = test_texts[idx]
          else:
              print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
              return
      except ValueError:
          print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
          return
  
  print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: '{test_text}'")
  
  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞
  old_debug = modem.debug_mode
  modem.debug_mode = True
  
  # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
  test_filename = "test_codec.wav"
  print(f"\nüì° –≠—Ç–∞–ø 1: –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ {test_filename}")
  success = modem.encode_to_audio(test_text, test_filename)
  
  if not success:
      print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è!")
      modem.debug_mode = old_debug
      return
  
  # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
  print(f"\nüéµ –≠—Ç–∞–ø 2: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ {test_filename}")
  decoded_text = modem.decode_from_audio(test_filename)
  
  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
  modem.debug_mode = old_debug
  
  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
  print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:    '{test_text}'")
  print(f"   –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π:    '{decoded_text}'")
  
  if test_text == decoded_text:
      print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –¢–µ–∫—Å—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
  else:
      print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏.")
      
      # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
      if len(test_text) != len(decoded_text):
          print(f"   –î–ª–∏–Ω–∞: –∏—Å—Ö–æ–¥–Ω–∞—è={len(test_text)}, –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è={len(decoded_text)}")
      
      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º
      max_len = max(len(test_text), len(decoded_text))
      errors = 0
      for i in range(max_len):
          orig_char = test_text[i] if i < len(test_text) else '‚àÖ'
          dec_char = decoded_text[i] if i < len(decoded_text) else '‚àÖ'
          if orig_char != dec_char:
              errors += 1
              if errors <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                  print(f"   –ü–æ–∑–∏—Ü–∏—è {i}: '{orig_char}' ‚Üí '{dec_char}'")
      
      if errors > 5:
          print(f"   ... –∏ –µ—â–µ {errors - 5} –æ—à–∏–±–æ–∫")
  
  input("\nüëÜ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def settings_menu(modem):
  """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
  print("\n‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–î–ï–ú–ê")
  print("-" * 25)
  print(f"üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
  print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {modem.sample_rate} –ì—Ü")
  print(f"   –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏: {modem.baud_rate} –±–æ–¥")
  print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –¥–ª—è '0': {modem.freq_0} –ì—Ü")
  print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –¥–ª—è '1': {modem.freq_1} –ì—Ü")
  print(f"   –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–í–∫–ª—é—á–µ–Ω' if modem.debug_mode else '–í—ã–∫–ª—é—á–µ–Ω'}")
  
  print(f"\nüìã –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
  print(f"1. –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏")
  print(f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏")
  print(f"3. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
  print(f"4. –°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
  print(f"0. –ù–∞–∑–∞–¥")
  
  choice = input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()
  
  if choice == '1':
      try:
          new_rate = int(input("üéöÔ∏è  –ù–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 8000): "))
          if new_rate > 0:
              modem.sample_rate = new_rate
              modem.bit_duration = new_rate / modem.baud_rate
              print(f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_rate} –ì—Ü")
          else:
              print("‚ùå –ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
      except ValueError:
          print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
  
  elif choice == '2':
      try:
          new_baud = int(input("üì° –ù–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 300): "))
          if new_baud > 0:
              modem.baud_rate = new_baud
              modem.bit_duration = modem.sample_rate / new_baud
              print(f"‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_baud} –±–æ–¥")
          else:
              print("‚ùå –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
      except ValueError:
          print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
  
  elif choice == '3':
      modem.debug_mode = not modem.debug_mode
      status = "–≤–∫–ª—é—á–µ–Ω" if modem.debug_mode else "–≤—ã–∫–ª—é—á–µ–Ω"
      print(f"‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ {status}")
  
  elif choice == '4':
      modem.sample_rate = 8000
      modem.baud_rate = 300
      modem.bit_duration = modem.sample_rate / modem.baud_rate
      modem.debug_mode = False
      print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
  
  if choice in ['1', '2', '3', '4']:
      input("\nüëÜ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def info_menu():
  """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
  print("\nüìö –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ì–†–ê–ú–ú–ï")
  print("-" * 30)
  print("üñ•Ô∏è  Dial-up Modem Text Codec v4.0")
  print("üì° –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∑–≤—É–∫–∏ –º–æ–¥–µ–º–∞")
  print()
  print("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
  print("   ‚Ä¢ FSK (Frequency Shift Keying) –º–æ–¥—É–ª—è—Ü–∏—è")
  print("   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç Bell 103:")
  print("     - –ß–∞—Å—Ç–æ—Ç–∞ –¥–ª—è '0': 1070 –ì—Ü")
  print("     - –ß–∞—Å—Ç–æ—Ç–∞ –¥–ª—è '1': 1270 –ì—Ü")
  print("   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300 –±–æ–¥")
  print("   ‚Ä¢ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤: WAV (16-–±–∏—Ç)")
  print("   ‚Ä¢ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8")
  print("   ‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –∏ –¥–ª–∏–Ω–æ–π")
  print()
  print("üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
  print("   ‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª")
  print("   ‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–∫—Å—Ç")
  print("   ‚úÖ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ UTF-8 (—Ä—É—Å—Å–∫–∏–π, —ç–º–æ–¥–∑–∏)")
  print("   ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
  print("   ‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
  print("   ‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
  print("   ‚úÖ –ù–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–µ—Ä–µ–¥–∞—á–∏")
  print()
  print("üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:")
  print("   ‚Ä¢ –≠–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã dial-up –º–æ–¥–µ–º–æ–≤")
  print("   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–≤—è–∑–∏")
  print("   ‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∞—É–¥–∏–æ–∫–∞–Ω–∞–ª")
  
  input("\nüëÜ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def main():
  """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
  try:
      import numpy as np
      from scipy.io.wavfile import write, read
  except ImportError as e:
      print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏!")
      print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install numpy scipy")
      print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e}")
      return
  
  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–º–∞
  modem = DialupModem()
  
  while True:
      print_header()
      print_menu()
      
      choice = input("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é (0-5): ").strip()
      
      if choice == '1':
          encode_menu(modem)
      elif choice == '2':
          decode_menu(modem)
      elif choice == '3':
          settings_menu(modem)
      elif choice == '4':
          info_menu()
      elif choice == '5':
          test_codec(modem)
      elif choice == '0':
          print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
          print("üì° –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Dial-up Modem Codec!")
          break
      else:
          print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
          input("üëÜ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
if __name__ == "__main__":
  main()
